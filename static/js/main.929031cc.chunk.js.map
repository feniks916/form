{"version":3,"sources":["API.js","Formik.jsx","serviceWorker.js","index.jsx","App.module.scss"],"names":["instance","axios","baseURL","postData","data","post","FormComponent","useState","reqData","setreqData","className","classes","wrapper","initialValues","email","name","age","password","repeatPassword","skills","id","value","onSubmit","values","a","Promise","resolve","setTimeout","filter","p","then","response","validationSchema","Yup","shape","required","min","max","matches","oneOf","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","form","done","span","placeholder","type","onChange","onBlur","feedback","push","remove","map","index","key","skillbox","fieldArea","length","CloseCircleOutlined","onClick","Number","checkBox","buttonsArea","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.929031cc.chunk.js","sourcesContent":["import * as axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:3001/sign-up',\n});\n\nconst postData = data =>\n  instance.post('', data);\n\nexport default postData;\n","/* eslint-disable arrow-parens */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Input, Button, Checkbox } from 'antd';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { Formik, FieldArray, Field } from 'formik';\nimport * as Yup from 'yup';\nimport * as axios from 'axios';\nimport classes from './App.module.scss';\nimport postData from './API';\n\nconst FormComponent = () => {\n  const [reqData, setreqData] = useState('');\n  return (\n    <div className={classes.wrapper}>\n      <Formik\n        initialValues={{\n          email: '',\n          name: '',\n          age: '',\n          password: '',\n          repeatPassword: '',\n          skills: [{ id: 0, value: '' }],\n        }}\n        onSubmit={async values => {\n          await new Promise(resolve => setTimeout(resolve, 500));\n          postData({\n            email: values.email,\n            name: values.name,\n            age: values.age,\n            password: values.password,\n            repeatPassword: values.repeatPassword,\n            skills: values.skills.filter(p => p.value !== ''),\n          }).then(response => setreqData(response.data));\n        }}\n        validationSchema={Yup.object().shape({\n          email: Yup.string()\n            .email()\n            .required('Поле обязательно'),\n          name: Yup.string().required('Поле обязательно'),\n          age: Yup.number().required('Поле обязательно'),\n          password: Yup.string()\n            .required('Поле обязательно')\n            .min(8, 'Password is too short - should be 8 chars minimum.')\n            .max(40, 'Password is too long - should be 40 chars maximum.')\n            .matches(\n              /(?=.*[a-z])(?=.*[A-Z])(?=.*?[0-9])/,\n              'Исплользуй 1 цифру 1 заглавную и одну строчную букву'\n            ),\n          repeatPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Пароли не совпадают'),\n        })}\n      >\n        {props => {\n          const {\n            values,\n            touched,\n            errors,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            handleReset,\n          } = props;\n          return (\n            <form onSubmit={handleSubmit} className={classes.form}>\n              {reqData === 'status 200' ? (\n                <h3 className={classes.done}>вы успешно зарегистрированы</h3>\n              ) : (\n                <h3>Registration Form</h3>\n              )}\n              <span className={classes.span}>name</span>\n              <Input\n                id=\"name\"\n                placeholder=\"Enter your name\"\n                type=\"text\"\n                value={values.name}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.name && touched.name && <div className={classes.feedback}>{errors.name}</div>}\n              <span className={classes.span}>email</span>\n              <Input\n                id=\"email\"\n                placeholder=\"Enter your email\"\n                type=\"text\"\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {reqData === 'error 500' && <h5>email already exists</h5>}\n              {errors.email && touched.email && (\n                <div className={classes.feedback}>{errors.email}</div>\n              )}\n              <span className={classes.span}>age</span>\n              <Input\n                id=\"age\"\n                placeholder=\"Enter your age\"\n                type=\"number\"\n                value={values.age}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.age && touched.age && <div className={classes.feedback}>{errors.age}</div>}\n              <span className={classes.span}>Password</span>\n              <Input\n                id=\"password\"\n                placeholder=\"Enter password\"\n                type=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.password && touched.password && (\n                <div className={classes.feedback}>{errors.password}</div>\n              )}\n              <span className={classes.span}>repeat Password</span>\n              <Input\n                id=\"repeatPassword\"\n                placeholder=\"repeat Password\"\n                type=\"password\"\n                value={values.repeatPassword}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n              {errors.repeatPassword && touched.repeatPassword && (\n                <div className={classes.feedback}>{errors.repeatPassword}</div>\n              )}\n              <FieldArray name=\"skills\">\n                {({ push, remove }) => (\n                  <div>\n                    {values.skills\n                      .map((p, index) => (\n                        <div key={p.id} className={classes.skillbox}>\n                          <span className={classes.span}>Skill</span>\n                          <div className={classes.fieldArea}>\n                            <Field name={`skills[${index}].value`} placeholder=\"Enter your skill\" />\n                            {values.skills.length > 1 && (\n                              <CloseCircleOutlined\n                                onClick={() => remove(index)}\n                                className={classes.skills}\n                              />\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    <Button\n                      type=\"button\"\n                      onClick={() => push({ id: Number(values.skills.length), value: '' })}\n                    >\n                      add to list\n                    </Button>\n                  </div>\n                )}\n              </FieldArray>\n              <div className={classes.checkBox}>\n                <div>\n                  <Checkbox />\n                </div>\n                <span className={classes.span}>Согласен с условиями</span>\n              </div>\n              <div className={classes.buttonsArea}>\n                <button type=\"submit\" disabled={isSubmitting}>\n                  Submit\n                </button>\n                <Button type=\"reset\" onClick={handleReset}>\n                  Reset\n                </Button>\n              </div>\n            </form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default FormComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FormComponent from './Formik';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FormComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__2a4FT\",\"form\":\"App_form__33OEa\",\"done\":\"App_done__1AvEM\",\"span\":\"App_span__3ILzE\",\"skills\":\"App_skills__1IviK\",\"skillbox\":\"App_skillbox__2l6xk\",\"fieldArea\":\"App_fieldArea__2NhOZ\",\"agreement\":\"App_agreement__3KxMQ\",\"wrapper\":\"App_wrapper__RCHjb\",\"feedback\":\"App_feedback__HTRjZ\",\"buttonsArea\":\"App_buttonsArea__2IYpa\",\"checkBox\":\"App_checkBox__2QKQD\"};"],"sourceRoot":""}